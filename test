#!/bin/sh



#!/bin/bash

SOURCE_USERNAME=$1
SOURCE_PASSWORD=$2
SOURCE_SERVER_NAME=$3
SOURCE_SERVER_PORT=$4
DESTINATION_USERNAME=$5
DESTINATION_PASSWORD=$6
DESTINATION_SERVER_NAME=$7
DESTINATION_SERVER_PORT=$8
APP_DB_NAME=$9


export SNAPSHOT_IDETIFIER = /usr/local/bin/aws rds describe-db-snapshots --query="reverse(sort_by(DBSnapshots, &SnapshotCreateTime))[0]" |DBSnapshotIdentifier"


# describe db instances

/usr/local/bin/aws rds describe-db-instances

/usr/local/bin/aws rds restore-db-instance-from-db-snapshot \
                   --db-instance-identifier mynewdbinstance \
                   --db-snapshot-identifier mydbsnapshot
                   
                   
                   aws rds describe-db-snapshots   --query="reverse(sort_by(DBSnapshots, &SnapshotCreateTime))[0]" >>test.json




CannotPullContainerError: inspect image has been retried 1 time(s): failed to resolve ref

"arn:aws:iam::${data.aws_caller_identity.current.account_id}:*"


craftcms-nlb-3c3bf144492843b7.elb.us-east-1.amazonaws.com


codepipeline
test

data "aws_iam_policy_document" "s3_cloudfront_read_only" {
  statement {
    sid    = "AllowReadAccessForCloudFront"
    effect = "Allow"

    principals {
      type = "AWS"
      identifiers = [
        for oai in var.static_site_cloud_front_oais :
        "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${oai}"
      ]
    }

    actions = [
      "s3:GetObject",
      "s3:ListBucket"
    ]

    resources = [
      aws_s3_bucket.ymm_cloudfront_origin.arn,
      "${aws_s3_bucket.ymm_cloudfront_origin.arn}/*"
    ]
  }
}










resource "aws_s3_bucket" "assets" {
  bucket = "craftcms-s3-cloudfront"

  versioning {
    enabled = true
  }
}


data "aws_iam_policy_document" "s3_policy" {

  statement {
    sid = "1"
    actions = ["s3:GetObject"]
    resources = ["${aws_s3_bucket.assets.arn}/*"]

    principals {
      identifiers = ["${aws_cloudfront_origin_access_identity.assets_origin.iam_arn}"]
      type = "AWS"
    }
  }
}

resource "aws_s3_bucket_policy" "assets" {
  bucket = "${aws_s3_bucket.assets.id}"
  policy = "${data.aws_iam_policy_document.s3_policy.json}"
}

resource "aws_s3_bucket_public_access_block" "host_bucket" {
  depends_on = [aws_s3_bucket_policy.assets]
  bucket     = aws_s3_bucket.assets.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

data "aws_iam_policy_document" "example" {
  statement {
    effect = "Allow"
    actions = [
      "s3:ListBucket"
    ]
    resources = [
      aws_s3_bucket.example.arn
    ]
  }
  statement {
    effect = "Allow"
    actions = [
      "s3:GetObject",
      "s3:PutObject"
    ]
    resources = [
      "${aws_s3_bucket.example.arn}/*"
    ]
  }
}


principals {
      type        = "AWS"
      identifiers = ["*"]
    }
    
    
    
    resource "aws_s3_bucket_public_access_block" "craftcms" {
  bucket = aws_s3_bucket.craftcms.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

data "aws_iam_policy_document" "craftcms_s3" {
  statement {
    effect = "Allow"
    actions = [
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:PutObject",
      "s3:PutObjectAcl"
    ]
    resources = ["*"]
  }
}

resource "aws_s3_bucket_policy" "craftcms_Bucket_Policy" {
  bucket = aws_s3_bucket.craftcms.id
  policy = data.aws_iam_policy_document.craftcms_s3.json
}




    'maxSlugIncrement' => 10000,
    'maxUploadFileSize' => 209715200,
    'allowUpdates' => true,
    'allowAdminChanges' => true,
    'elevatedSessionDuration' => 0,
    
    
    
    
    {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "s3:AssumeRole",
                "s3:PutObject",
                "s3:ListBucket",
                "s3:GetObjectVersion",
                "s3:GetObject",
                "s3:GetBucketVersioning",
                "firehose:PutRecordBatch",
                "kinesis:PutRecords",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "AssumedByMassTransECS"
        }
    ]
}





{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "acm:ListCertificates",
                "cloudfront:GetDistribution",
                "cloudfront:GetStreamingDistribution",
                "cloudfront:GetDistributionConfig",
                "cloudfront:ListDistributions",
                "cloudfront:ListCloudFrontOriginAccessIdentities",
                "cloudfront:CreateInvalidation",
                "cloudfront:GetInvalidation",
                "cloudfront:ListInvalidations",
                "elasticloadbalancing:DescribeLoadBalancers",
                "iam:ListServerCertificates",
                "sns:ListSubscriptionsByTopic",
                "sns:ListTopics",
                "waf:GetWebACL",
                "waf:ListWebACLs"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:GetBucketLocation",
                "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket"
            ],
            "Resource": [
                "arn:aws:s3:::craftcms-s3-cloudfront"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:*"
            ],
            "Resource": [
                "arn:aws:s3:::craftcms-s3-cloudfront/*"
            ]
        }
    ]
}


#!/bin/sh

MYSQL_HOST=$1
MYSQL_HOST_1=$2
MYSQL_USER=$3
MYSQL_PASSWORD=$4
DATABASE_NAME=$5


SNAPSHOT_IDENTIFIER=$(aws rds describe-db-snapshots --query="reverse(sort_by(DBSnapshots, &SnapshotCreateTime))[0]|DBSnapshotIdentifier" --output=text)


echo $SNAPSHOT_IDENTIFIER


aws rds restore-db-instance-from-db-snapshot --db-instance-identifier nithya123  --db-snapshot-identifier ${SNAPSHOT_IDENTIFIER}  --vpc-security-group-ids sg-0e853a914be96db97 --db-subnet-group-name rds-private-subnet-group

aws rds describe-db-instances --db-instance-identifier nithya123 --query 'DBInstances[*].[DBInstanceStatus]'


while state=$(aws rds describe-db-instances --db-instance-identifier nithya123 --query 'DBInstances[*].[DBInstanceStatus]' --output=text); do
  if [ "$state" = "available" ]; then
    echo "available"
    mysqldump -h${MYSQL_HOST_1} -u${MYSQL_USER} -p${MYSQL_PASSWORD} ${DATABASE_NAME} > dump.sql
    echo "dump_done"
    mysql -h${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_PASSWORD} ${DATABASE_NAME} < dump.sql
    echo "restore_done"
    break
  else
    echo "unavailable"
  fi
  sleep 30;
done

aws rds delete-db-instance --db-instance-identifier nithya123 --skip-final-snapshot --no-delete-automated-backups


